import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Load the dataset
file_path = "C:\Users\himan\OneDrive\Desktop\cardialink-quantify\src\components\model\diabetes_binary_health_indicators_BRFSS2015.csv"
df = pd.read_csv(file_path)

# Data cleaning
df = df.replace(['\t?', '?', 'NA', 'NaN'], np.nan)
df.dropna(how='all', axis=1, inplace=True)

# Handling missing values in numeric columns
numeric_cols = df.select_dtypes(include=[np.number]).columns
num_imputer = SimpleImputer(strategy='median')
df[numeric_cols] = num_imputer.fit_transform(df[numeric_cols])

# Splitting features and target
X = df.drop('Diabetes_binary', axis=1)
y = df['Diabetes_binary']

# Standardizing numerical features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

# Train Gradient Boosting Classifier
diabetes_model = GradientBoostingClassifier()
diabetes_model.fit(X_train, y_train)

# Model evaluation
y_pred = diabetes_model.predict(X_test)
diabetes_accuracy = accuracy_score(y_test, y_pred)

diabetes_accuracy
